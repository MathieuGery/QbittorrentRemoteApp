{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport request from \"./APIKit\";\n\nfunction login(data) {\n  return _regeneratorRuntime.async(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", request({\n            url: '/auth/login',\n            method: 'POST',\n            data: data\n          }));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar qbittorrentServices = {\n  login: login\n};\n\nfunction getApplicationVersion() {\n  return _regeneratorRuntime.async(function getApplicationVersion$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", request({\n            url: '/app/version',\n            method: 'get'\n          }));\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getAPIVersion() {\n  return _regeneratorRuntime.async(function getAPIVersion$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          return _context3.abrupt(\"return\", request({\n            url: '/app/webapiVersion',\n            method: 'get'\n          }));\n\n        case 1:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getBuildInfo() {\n  return _regeneratorRuntime.async(function getBuildInfo$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          return _context4.abrupt(\"return\", request({\n            url: '/app/buildInfo',\n            method: 'get'\n          }));\n\n        case 1:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction shutDownApplication() {\n  return _regeneratorRuntime.async(function shutDownApplication$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          return _context5.abrupt(\"return\", request({\n            url: '/app/shutdown',\n            method: 'get'\n          }));\n\n        case 1:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getApplicationPreferences() {\n  return _regeneratorRuntime.async(function getApplicationPreferences$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          return _context6.abrupt(\"return\", request({\n            url: '/app/preferences',\n            method: 'get'\n          }));\n\n        case 1:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction setApplicationPreferences() {\n  return _regeneratorRuntime.async(function setApplicationPreferences$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          return _context7.abrupt(\"return\", request({\n            url: '/app/setPreferences',\n            method: 'get'\n          }));\n\n        case 1:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getDefaultSavePath() {\n  return _regeneratorRuntime.async(function getDefaultSavePath$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          return _context8.abrupt(\"return\", request({\n            url: '/app/defaultSavePath',\n            method: 'get'\n          }));\n\n        case 1:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getLog() {\n  var normal,\n      info,\n      warning,\n      critical,\n      last_know_id,\n      _args9 = arguments;\n  return _regeneratorRuntime.async(function getLog$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          normal = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : true;\n          info = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : true;\n          warning = _args9.length > 2 && _args9[2] !== undefined ? _args9[2] : true;\n          critical = _args9.length > 3 && _args9[3] !== undefined ? _args9[3] : true;\n          last_know_id = _args9.length > 4 && _args9[4] !== undefined ? _args9[4] : -1;\n          return _context9.abrupt(\"return\", request({\n            url: '/log/main',\n            method: 'post',\n            data: {\n              normal: normal,\n              info: info,\n              warning: warning,\n              critical: critical,\n              last_know_id: last_know_id\n            }\n          }));\n\n        case 6:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getPeerLog() {\n  var last_known_id,\n      _args10 = arguments;\n  return _regeneratorRuntime.async(function getPeerLog$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          last_known_id = _args10.length > 0 && _args10[0] !== undefined ? _args10[0] : -1;\n          return _context10.abrupt(\"return\", request({\n            url: '/log/peers',\n            method: 'post',\n            data: {\n              last_known_id: last_known_id\n            }\n          }));\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getMainData() {\n  var rid,\n      _args11 = arguments;\n  return _regeneratorRuntime.async(function getMainData$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          rid = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : 0;\n          return _context11.abrupt(\"return\", request({\n            url: '/sync/maindata?rid=${rid}',\n            method: 'get'\n          }));\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getTorrentPeersData(hash) {\n  var rid,\n      _args12 = arguments;\n  return _regeneratorRuntime.async(function getTorrentPeersData$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          rid = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : 0;\n          return _context12.abrupt(\"return\", request({\n            url: '/sync/torrentPeers',\n            method: 'post',\n            data: {\n              hash: hash,\n              rid: rid\n            }\n          }));\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getGlobalTransferInfo() {\n  return _regeneratorRuntime.async(function getGlobalTransferInfo$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          return _context13.abrupt(\"return\", request({\n            url: '/transfer/info',\n            method: 'get'\n          }));\n\n        case 1:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getAlternativeSpeedLimitsState() {\n  return _regeneratorRuntime.async(function getAlternativeSpeedLimitsState$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          return _context14.abrupt(\"return\", request({\n            url: '/transfer/speedLimitsMode',\n            method: 'get'\n          }));\n\n        case 1:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction toggleAlernativeSpeedLimits() {\n  return _regeneratorRuntime.async(function toggleAlernativeSpeedLimits$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          return _context15.abrupt(\"return\", request({\n            url: '/transfer/toggleSpeedLimitsMode',\n            method: 'get'\n          }));\n\n        case 1:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getGlobalDownloadLimit() {\n  return _regeneratorRuntime.async(function getGlobalDownloadLimit$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          return _context16.abrupt(\"return\", request({\n            url: '/transfer/downloadLimit',\n            method: 'get'\n          }));\n\n        case 1:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction setGlobalDownloadLimit(limit) {\n  return _regeneratorRuntime.async(function setGlobalDownloadLimit$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          return _context17.abrupt(\"return\", request({\n            url: '/transfer/setDownloadLimit',\n            method: 'post',\n            data: {\n              limit: limit * 1024\n            }\n          }));\n\n        case 1:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getGlobalUploadLimit() {\n  return _regeneratorRuntime.async(function getGlobalUploadLimit$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          return _context18.abrupt(\"return\", request({\n            url: '/transfer/uploadLimit',\n            method: 'get'\n          }));\n\n        case 1:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction setGlobalUploadLimit(limit) {\n  return _regeneratorRuntime.async(function setGlobalUploadLimit$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          return _context19.abrupt(\"return\", request({\n            url: '/transfer/setUploadLimit',\n            method: 'post',\n            data: {\n              limit: limit * 1024\n            }\n          }));\n\n        case 1:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getTorrentList() {\n  return _regeneratorRuntime.async(function getTorrentList$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          return _context20.abrupt(\"return\", request({\n            url: '/torrents/info',\n            method: 'get',\n            data: {\n              filter: '',\n              category: '',\n              tag: '',\n              sort: '',\n              serverse: '',\n              limit: '',\n              offset: '',\n              hashes: ''\n            }\n          }));\n\n        case 1:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getTorrentGenericProperties(hash) {\n  return _regeneratorRuntime.async(function getTorrentGenericProperties$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          return _context21.abrupt(\"return\", request({\n            url: '/torrents/properties',\n            method: 'post',\n            data: {\n              hash: hash\n            }\n          }));\n\n        case 1:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getTorrentTrackers(hash) {\n  return _regeneratorRuntime.async(function getTorrentTrackers$(_context22) {\n    while (1) {\n      switch (_context22.prev = _context22.next) {\n        case 0:\n          return _context22.abrupt(\"return\", request({\n            url: '/torrents/trackers',\n            method: 'post',\n            data: {\n              hash: hash\n            }\n          }));\n\n        case 1:\n        case \"end\":\n          return _context22.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getTorrentWebSeeds(hash) {\n  return _regeneratorRuntime.async(function getTorrentWebSeeds$(_context23) {\n    while (1) {\n      switch (_context23.prev = _context23.next) {\n        case 0:\n          return _context23.abrupt(\"return\", request({\n            url: '/torrents/webseeds',\n            method: 'post',\n            data: {\n              hash: hash\n            }\n          }));\n\n        case 1:\n        case \"end\":\n          return _context23.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getTorrentContents(hash) {\n  var indexes,\n      _args24 = arguments;\n  return _regeneratorRuntime.async(function getTorrentContents$(_context24) {\n    while (1) {\n      switch (_context24.prev = _context24.next) {\n        case 0:\n          indexes = _args24.length > 1 && _args24[1] !== undefined ? _args24[1] : null;\n          return _context24.abrupt(\"return\", request({\n            url: '/torrents/files',\n            method: 'post',\n            data: {\n              hash: hash,\n              indexes: indexes\n            }\n          }));\n\n        case 2:\n        case \"end\":\n          return _context24.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getTorrentPiecesStates(hash) {\n  return _regeneratorRuntime.async(function getTorrentPiecesStates$(_context25) {\n    while (1) {\n      switch (_context25.prev = _context25.next) {\n        case 0:\n          return _context25.abrupt(\"return\", request({\n            url: '/torrents/pieceStates',\n            method: 'post',\n            data: {\n              hash: hash\n            }\n          }));\n\n        case 1:\n        case \"end\":\n          return _context25.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getTorrentPiecesHashes(hash) {\n  return _regeneratorRuntime.async(function getTorrentPiecesHashes$(_context26) {\n    while (1) {\n      switch (_context26.prev = _context26.next) {\n        case 0:\n          return _context26.abrupt(\"return\", request({\n            url: '/torrents/pieceHashes',\n            method: 'post',\n            data: {\n              hash: hash\n            }\n          }));\n\n        case 1:\n        case \"end\":\n          return _context26.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction pauseTorrents(hashes) {\n  return _regeneratorRuntime.async(function pauseTorrents$(_context27) {\n    while (1) {\n      switch (_context27.prev = _context27.next) {\n        case 0:\n          return _context27.abrupt(\"return\", request({\n            url: '/torrents/pause',\n            method: 'post',\n            data: {\n              hashes: hashes\n            }\n          }));\n\n        case 1:\n        case \"end\":\n          return _context27.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction resumeTorrents(hashes) {\n  return _regeneratorRuntime.async(function resumeTorrents$(_context28) {\n    while (1) {\n      switch (_context28.prev = _context28.next) {\n        case 0:\n          return _context28.abrupt(\"return\", request({\n            url: '/torrents/resume',\n            method: 'post',\n            data: {\n              hashes: hashes\n            }\n          }));\n\n        case 1:\n        case \"end\":\n          return _context28.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction deleteTorrent(hashes, deleteFiles) {\n  return _regeneratorRuntime.async(function deleteTorrent$(_context29) {\n    while (1) {\n      switch (_context29.prev = _context29.next) {\n        case 0:\n          return _context29.abrupt(\"return\", request({\n            url: '/torrents/delete',\n            method: 'post',\n            data: {\n              hashes: hashes,\n              deleteFiles: deleteFiles\n            }\n          }));\n\n        case 1:\n        case \"end\":\n          return _context29.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction recheckTorrrents(hashes) {\n  return _regeneratorRuntime.async(function recheckTorrrents$(_context30) {\n    while (1) {\n      switch (_context30.prev = _context30.next) {\n        case 0:\n          return _context30.abrupt(\"return\", request({\n            url: '/torrents/recheck',\n            method: 'post',\n            data: {\n              hashes: hashes\n            }\n          }));\n\n        case 1:\n        case \"end\":\n          return _context30.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction reannouceTorrents(hashes) {\n  return _regeneratorRuntime.async(function reannouceTorrents$(_context31) {\n    while (1) {\n      switch (_context31.prev = _context31.next) {\n        case 0:\n          return _context31.abrupt(\"return\", request({\n            url: '/torrents/reannounce',\n            method: 'post',\n            data: {\n              hashes: hashes\n            }\n          }));\n\n        case 1:\n        case \"end\":\n          return _context31.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default qbittorrentServices;","map":{"version":3,"sources":["/home/julien/QbittorrentRemoteApp/src/services/Qbit.tsx"],"names":["request","login","data","url","method","qbittorrentServices","getApplicationVersion","getAPIVersion","getBuildInfo","shutDownApplication","getApplicationPreferences","setApplicationPreferences","getDefaultSavePath","getLog","normal","info","warning","critical","last_know_id","getPeerLog","last_known_id","getMainData","rid","getTorrentPeersData","hash","getGlobalTransferInfo","getAlternativeSpeedLimitsState","toggleAlernativeSpeedLimits","getGlobalDownloadLimit","setGlobalDownloadLimit","limit","getGlobalUploadLimit","setGlobalUploadLimit","getTorrentList","filter","category","tag","sort","serverse","offset","hashes","getTorrentGenericProperties","getTorrentTrackers","getTorrentWebSeeds","getTorrentContents","indexes","getTorrentPiecesStates","getTorrentPiecesHashes","pauseTorrents","resumeTorrents","deleteTorrent","deleteFiles","recheckTorrrents","reannouceTorrents"],"mappings":"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","sourcesContent":["import request from './APIKit';\n\nasync function login(data) {\n  return request({\n    url: '/auth/login',\n    method: 'POST',\n    data\n  });\n}\nconst qbittorrentServices = {\n  login,\n};\n\n\n\nasync function getApplicationVersion() {\n  return request({\n    url: '/app/version',\n    method: 'get',\n  });\n}\n\nasync function getAPIVersion() {\n  return request({\n    url: '/app/webapiVersion',\n    method: 'get',\n  });\n}\n\nasync function getBuildInfo() {\n  return request({\n    url: '/app/buildInfo',\n    method: 'get',\n  });\n}\n\nasync function shutDownApplication() {\n  return request({\n    url: '/app/shutdown',\n    method: 'get',\n  });\n}\n\n\nasync function getApplicationPreferences() {\n  return request({\n    url: '/app/preferences',\n    method: 'get',\n  });\n}\n\nasync function setApplicationPreferences() {\n  return request({\n    url:'/app/setPreferences',\n    method: 'get',\n  });\n}\n\nasync function getDefaultSavePath() {\n  return request({\n    url: '/app/defaultSavePath',\n    method: 'get',\n  });\n}\n\n\nasync function getLog(normal = true, info = true, warning = true, critical = true, last_know_id = -1) {\n  return request({\n    url: '/log/main',\n    method: 'post',\n    data:{\n      normal: normal,\n      info: info,\n      warning: warning,\n      critical: critical,\n      last_know_id: last_know_id,\n    }\n  });\n}\n\nasync function getPeerLog(last_known_id=-1) {\n  return request({\n    url: '/log/peers',\n    method: 'post',\n    data:{\n      last_known_id: last_known_id,\n    }\n  });\n}\n\nasync function getMainData(rid=0) {\n  return request({\n    url: '/sync/maindata?rid=${rid}',\n    method: 'get',\n  });\n}\n\nasync function getTorrentPeersData(hash, rid=0) {\n  return request({\n    url: '/sync/torrentPeers',\n    method: 'post',\n    data:{\n      hash: hash,\n      rid: rid,\n    }\n  });\n}\n\nasync function getGlobalTransferInfo() {\n  return request({\n    url: '/transfer/info',\n    method: 'get',\n  });\n}\n\nasync function getAlternativeSpeedLimitsState() {\n  return request({\n    url: '/transfer/speedLimitsMode',\n    method: 'get',\n  });\n}\n\nasync function toggleAlernativeSpeedLimits() {\n  return request({\n    url: '/transfer/toggleSpeedLimitsMode',\n    method: 'get',\n  });\n}\n\nasync function getGlobalDownloadLimit() {\n  return request({\n    url: '/transfer/downloadLimit',\n    method: 'get',\n  });\n}\n\nasync function setGlobalDownloadLimit(limit) {\n  return request({\n    url: '/transfer/setDownloadLimit',\n    method: 'post',\n    data:{\n      limit: limit*1024\n    }\n  });\n}\n\nasync function getGlobalUploadLimit() {\n  return request({\n    url: '/transfer/uploadLimit',\n    method: 'get',\n  });\n}\n\nasync function setGlobalUploadLimit(limit) {\n  return request({\n    url: '/transfer/setUploadLimit',\n    method: 'post',\n    data:{\n      limit: limit*1024\n    }\n  });\n}\n//TODO 'Ban peers'\n\n\n//TODO upgrade parameters torrent list\nasync function getTorrentList() {\n  return request({\n    url: '/torrents/info',\n    method: 'get',\n    data: {\n    filter: '',\n    category: '',\n    tag: '',\n    sort: '',\n    serverse: '',\n    limit: '',\n    offset: '',\n    hashes: '',\n    }\n  });\n}\n\n\n\n\nasync function getTorrentGenericProperties(hash) {\n  return request({\n    url: '/torrents/properties',\n    method: 'post',\n    data: {\n      hash: hash,\n    }\n  });\n}\n\n\nasync function getTorrentTrackers(hash) {\n  return request({\n    url: '/torrents/trackers',\n    method: 'post',\n    data: {\n      hash: hash,\n    }\n  });\n}\n\nasync function getTorrentWebSeeds(hash) {\n  return request({\n    url: '/torrents/webseeds',\n    method: 'post',\n    data: {\n      hash: hash,\n    }\n  });\n}\n\nasync function getTorrentContents(hash, indexes=null) {\n  return request({\n    url : '/torrents/files',\n    method: 'post',\n    data: {\n      hash: hash,\n      indexes: indexes,\n    }\n  });\n}\n\n\nasync function getTorrentPiecesStates(hash) {\n  return request({\n    url : '/torrents/pieceStates',\n    method: 'post',\n    data: {\n      hash: hash,\n    }\n  });\n}\n\nasync function getTorrentPiecesHashes(hash)\n//The hashes of the torrents you want to pause. hashes can contain multiple hashes separated by |, to pause multiple torrents, or set to all, to pause all torrents.\n{\n  return request({\n    url : '/torrents/pieceHashes',\n    method: 'post',\n    data: {\n      hash: hash,\n    }\n  });\n}\n\nasync function pauseTorrents(hashes) {\n  return request({\n    url : '/torrents/pause',\n    method: 'post',\n    data: {\n      hashes: hashes,\n    }\n  });\n}\n\nasync function resumeTorrents(hashes) \n//The hashes of the torrents you want to resume. hashes can contain multiple hashes separated by |, to resume multiple torrents, or set to all, to resume all torrents.\n{\n  return request({\n    url : '/torrents/resume',\n    method: 'post',\n    data: {\n      hashes: hashes,\n    }\n  });\n}\n\nasync function deleteTorrent(hashes, deleteFiles)\n//deleteFiles\tIf set to true, the downloaded data will also be deleted\n {\n  return request({\n    url : '/torrents/delete',\n    method: 'post',\n    data: {\n      hashes: hashes,\n      deleteFiles: deleteFiles,\n    }\n  });\n}\n\n\nasync function recheckTorrrents(hashes) {\n  return request({\n    url : '/torrents/recheck',\n    method: 'post',\n    data: {\n      hashes: hashes,\n    }\n  });\n}\n\nasync function reannouceTorrents(hashes) {\n  return request({\n    url : '/torrents/reannounce',\n    method: 'post',\n    data: {\n      hashes: hashes,\n    }\n  });\n}\n\n\nexport default qbittorrentServices;\n"]},"metadata":{},"sourceType":"module"}